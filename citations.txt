To convert a 1D index into a 2D index in a row-major ordered array, you can use the following formula:

### Formula:

Given:
- `k`: the 1D index of the element in the flattened array.
- `m`: the number of rows in the 2D array.
- `n`: the number of columns in the 2D array.

The 2D index `(i, j)` corresponding to the 1D index `k` is:

- **Row index `i`**:  
  \[
  i = \frac{k}{n}
  \]
  where `i` is the integer division of `k` by `n`.

- **Column index `j`**:  
  \[
  j = k \% n
  \]
  where `j` is the remainder when `k` is divided by `n` (this gives the column position within the row).

### Explanation:
- The row index `i` is determined by how many full rows have been traversed by `k`, and this is calculated using integer division (`k // n`).
- The column index `j` is simply the remainder of dividing `k` by the number of columns (`k % n`), which tells you the position within the current row.

### Example:
Let's say you have a 2D array with dimensions `3x4` (3 rows and 4 columns), and you know the 1D index `k = 5`. To find the corresponding 2D index `(i, j)`:

1. **Row index `i`**:
   \[
   i = \frac{5}{4} = 1
   \]
   So, `i = 1` (the second row).
   
2. **Column index `j`**:
   \[
   j = 5 \% 4 = 1
   \]
   So, `j = 1` (the second column).

Thus, the 2D index `(i, j)` corresponding to the 1D index `k = 5` is `(1, 1)`.

### General Example:
For a 2D array of shape `m x n`, if `k` is the 1D index:
- **Row index `i = k // n`**
- **Column index `j = k % n`**

### Python Example:
Hereâ€™s how you can compute this in Python:

```python
def get_2d_index(k, n):
    i = k // n  # Row index
    j = k % n   # Column index
    return i, j

# Example usage:
m, n = 3, 4  # 3 rows, 4 columns
k = 5  # 1D index
i, j = get_2d_index(k, n)
print(f"2D index of 1D index {k}: ({i}, {j})")
```

Output:
```
2D index of 1D index 5: (1, 1)
```

This approach gives you the exact position in the 2D array corresponding to a given 1D index in a row-major ordered array.